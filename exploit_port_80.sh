#!/bin/bash

# Print a separator line for better visibility in the terminal output
echo -e "------------------------------------------------"

# Notify the user that the screenshot folder is being created
echo "Creating Screenshot Folder"

# Create a directory to store screenshots from targets on port 80
mkdir -p runD/open_juicy_ports/80/screenshots

# Inform the user that the script is resolving live IP addresses
echo "Resolving Live IP Address.."

# Read IP addresses from the specified file, pass them to httpx for resolution,
# and save the output (live IPs) to another file
cat runD/open_juicy_ports/80/ips_port80.txt | ./httpx -silent | tee runD/open_juicy_ports/80/live_ips_port80.txt

# Notify the user that the exploit is being run on port 80
echo "Running Exploit on: port 80"
# Pause for half a second before proceeding
sleep 0.5
# Indicate that screenshots are being taken
echo "Taking Screenshots..!"

# Define variables for input and output files
port80_targets="runD/open_juicy_ports/80/ips_port80.txt"
live_port80_targets="runD/open_juicy_ports/80/live_ips_port80.txt"
port80_folder="runD/open_juicy_ports/80/screenshots"

# Display a warning message about time consumption (assuming $TIME_TAKING_WARRNING is defined elsewhere)
echo -e "$TIME_TAKING_WARRNING"

# Execute the screenshot script with the live targets and output folder,
# redirecting output to /dev/null to suppress it
node WebShot/screenshot.js -f "$live_port80_targets" -o "$port80_folder" > /dev/null 2>&1